- Get all the classes:

select distinct ?class where{?class a <http://www.w3.org/2000/01/rdf-schema#Class>}

- Get all the subclasses of the class Establishment:

select distinct ?subClass where {?subClass <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://GP-onto.fi.upm.es/exercise2#Establishment>}

- Get all instances of the class City

select distinct ?ListInstances where{ ?ListInstances a <http://GP-onto.fi.upm.es/exercise2#City>}

- Get the number of inhabitants of Santiago de Compostela

select distinct  ?number where{<http://GP-onto.fi.upm.es/exercise2#Santiago_de_Compostela> <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?number}

- Get the number of inhabitants of Santiago de Compostela and Arzua


select distinct ?SantiagoDeCompostela,?Arzua where{<http://GP-onto.fi.upm.es/exercise2#Santiago_de_Compostela> <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?SantiagoDeCompostela. <http://GP-onto.fi.upm.es/exercise2#Arzua> <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?Arzua }


- Get all places, together with the number of inhabitants, ordered by the place name (ascending)

select distinct ?place,?number where{ ?placeOrd <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?number;
<http://www.w3.org/2000/01/rdf-schema#label> ?place}
order by asc(?placeOrd)


- Get all instances of  Locality together with their number of inhabitants (if this information exists)

select distinct ?local,?number  where {
?local a ?placeOrd.?placeOrd <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://GP-onto.fi.upm.es/exercise2#Locality>. optional{?local <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?number }
}


- Get all places with more than 200.000 inhabitants


select distinct ?number,?place where{ ?placeOrd <http://GP-onto.fi.upm.es/exercise2#hasInhabitantNumber> ?number;
<http://www.w3.org/2000/01/rdf-schema#label> ?place filter (xsd:integer(?number) > 200000)}


- Get postal address data for Pazo_Breogan (street, number, locality, province)

select distinct ?street,?number,?locality,?province where{<http://GP-onto.fi.upm.es/exercise2#Pazo_Breogan> <http://GP-onto.fi.upm.es/exercise2#isPlacedIn> $placed;
<http://GP-onto.fi.upm.es/exercise2#hasAddress> $address. $placed <http://www.w3.org/2000/01/rdf-schema#label> ?locality; <http://GP-onto.fi.upm.es/exercise2#inProvince> ?province. $address <http://GP-onto.fi.upm.es/exercise2#hasStreet> ?street;
<http://GP-onto.fi.upm.es/exercise2#hasNumber> ?number}


- Get all subclasses of class Location

select distinct ?subClass where{?subClass <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://GP-onto.fi.upm.es/exercise2#Location>}


- Get all instances of class Locality

select distinct ?subClass where {?instances <http://www.w3.org/2000/01/rdf-schema#subClassOf> <http://GP-onto.fi.upm.es/exercise2#Locality>.?class ?arg ?instances.?class <http://www.w3.org/2000/01/rdf-schema#label> ?subClass }



- Describe the resource with rdfs:label "Madrid”

describe ?resource where {?resource <http://www.w3.org/2000/01/rdf-schema#label>'Madrid' }


- Construct a graph that relates directly all touristic places with their provinces, using a new property called ”isIn”


construct {?tourist <http://GP-onto.fi.upm.es/exercise2#isIn> ?prov} 
where {?turist ?arg2 <http://GP-onto.fi.upm.es/exercise2#TouristicLocation>.
?tourist <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?turist.
 ?arg <http://GP-onto.fi.upm.es/exercise2#isPlacedIn> ?placed.
?placed <http://GP-onto.fi.upm.es/exercise2#inProvince>  ?prov} 

- Check whether there is any instance of Town

ask where{?any a <http://GP-onto.fi.upm.es/exercise2#Town>}


